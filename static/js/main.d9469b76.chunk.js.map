{"version":3,"sources":["features/welcome/HomePage.module.css","features/welcome/ContactBar.jsx","features/welcome/HomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactBar","className","styles","contactBar","href","icon","iconSize","Icon","MAX_SIZE","contactIcon","email","React","Component","HomePage","title","wrapper","shadow","description","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,QAAU,0BAA0B,OAAS,yBAAyB,YAAc,8BAA8B,WAAa,6BAA6B,YAAc,8BAA8B,MAAQ,0B,gOCkBnPC,E,uKAXX,OACE,yBAAKC,UAAWC,IAAOC,YACrB,uBAAGC,KAAK,8BACN,kBAAC,OAAD,CAAMC,KAAK,QAAQC,SAAUC,OAAKC,SAAUP,UAAWC,IAAOO,eAEhE,0BAAMR,UAAWC,IAAOQ,OAAxB,8B,GAPiBC,IAAMC,WCehBC,E,uKAbX,OACE,6BACE,wBAAIZ,UAAWC,IAAOY,OAAtB,oBACA,yBAAKb,UAAWC,IAAOa,SACrB,wBAAId,UAAWC,IAAOc,QAAtB,cAEF,wBAAIf,UAAWC,IAAOe,aAAtB,8EACA,kBAAC,EAAD,W,GATeN,IAAMC,W,OCkBdM,MAZf,WACE,OACE,kBAAC,EAAD,OCFgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9469b76.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HomePage_title__2CtPR\",\"wrapper\":\"HomePage_wrapper__29qVO\",\"shadow\":\"HomePage_shadow__2INoS\",\"description\":\"HomePage_description__1zpQU\",\"contactBar\":\"HomePage_contactBar__2uRhc\",\"contactIcon\":\"HomePage_contactIcon__3CWbO\",\"email\":\"HomePage_email__9pFS6\"};","import React from 'react';\n\nimport { Icon } from \"@blueprintjs/core\";\n\nimport styles from './HomePage.module.css';\n\nclass ContactBar extends React.Component {\n  render() {\n    return (\n      <div className={styles.contactBar}>\n        <a href=\"mailto:aytan@princeton.edu\">\n          <Icon icon=\"inbox\" iconSize={Icon.MAX_SIZE} className={styles.contactIcon}/>\n        </a>\n        <span className={styles.email}> aytan@princeton.edu </span>\n      </div>\n    );\n  }\n}\n\nexport default ContactBar;\n","import React from 'react';\n\nimport styles from './HomePage.module.css';\n\nimport ContactBar from './ContactBar'\n\nclass HomePage extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1 className={styles.title}> Hi, my name is </h1>\n        <div className={styles.wrapper}>\n          <h1 className={styles.shadow}> Autumn. </h1>\n        </div>\n        <h1 className={styles.description}> A girl who codes, creates, learns, journals, photographs, and dreams ... </h1>\n        <ContactBar />\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport HomePage from './features/welcome/HomePage';\n// import ExperiencePage from './features/experience/ExperiencePage';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <HomePage />\n  );\n  // <Router>\n  //   <Switch>\n  //     <Route exact path=\"/\" component={HomePage} />\n  //     <Route path=\"/experience\" component={ExperiencePage} />\n  //   </Switch>\n  // </Router>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}